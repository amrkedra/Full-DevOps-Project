# Source: ingress-nginx/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.11.2
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/version: "1.11.2"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-ingress-nginx
  namespace: ingress-nginx
automountServiceAccountToken: true
---
# Source: ingress-nginx/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.11.2
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/version: "1.11.2"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-ingress-nginx-controller
  namespace: ingress-nginx
data:
  allow-snippet-annotations: "false"
---
# Source: ingress-nginx/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.11.2
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/version: "1.11.2"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
  name: my-ingress-nginx
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
---
# Source: ingress-nginx/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.11.2
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/version: "1.11.2"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
  name: my-ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-ingress-nginx
subjects:
- kind: ServiceAccount
  name: my-ingress-nginx
  namespace: ingress-nginx
---
# Source: ingress-nginx/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.11.2
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/version: "1.11.2"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-ingress-nginx
  namespace: ingress-nginx
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  resourceNames:
  - my-ingress-nginx-leader
  verbs:
  - get
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
---
# Source: ingress-nginx/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.11.2
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/version: "1.11.2"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-ingress-nginx
  namespace: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-ingress-nginx
subjects:
- kind: ServiceAccount
  name: my-ingress-nginx
  namespace: ingress-nginx
---
# Source: ingress-nginx/templates/controller-service-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.11.2
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/version: "1.11.2"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-ingress-nginx-controller-admission
  namespace: ingress-nginx
spec:
  type: ClusterIP
  ports:
  - name: https-webhook
    port: 443
    targetPort: webhook
    appProtocol: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/component: controller
---
# Source: ingress-nginx/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: ingress-nginx-4.11.2
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/version: "1.11.2"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-ingress-nginx-controller
  namespace: ingress-nginx
spec:
  type: NodePort
  ipFamilyPolicy: SingleStack
  ipFamilies:
  - IPv4
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
    appProtocol: http
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
    appProtocol: https
    nodePort: 30070 # Set the NodePort for HTTPS
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/component: controller
---
# Source: ingress-nginx/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.11.2
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/version: "1.11.2"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: my-ingress-nginx-controller
  namespace: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: my-ingress-nginx
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: my-ingress-nginx
        app.kubernetes.io/component: controller
    spec:
      serviceAccountName: my-ingress-nginx
      containers:
      - name: controller
        image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.49.3
        args:
        - /nginx-ingress-controller
        - --configmap=$(POD_NAMESPACE)/my-ingress-nginx-controller
        - --tcp-services-configmap=$(POD_NAMESPACE)/my-ingress-nginx-controller
        - --udp-services-configmap=$(POD_NAMESPACE)/my-ingress-nginx-controller
        - --annotations-prefix=nginx.ingress.kubernetes.io
        - --default-backend-service=$(POD_NAMESPACE)/my-ingress-nginx-default-backend
        - --enable-ssl-passthrough
        - --publish-service=$(POD_NAMESPACE)/my-ingress-nginx-controller
        - --v=2
        - --watch-namespace=ingress-nginx
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
          initialDelaySeconds: 5
          periodSeconds: 10
---
# Source: ingress-nginx/templates/defaultbackend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.11.2
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/version: "1.11.2"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
  name: my-ingress-nginx-default-backend
  namespace: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: my-ingress-nginx
      app.kubernetes.io/component: default-backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: my-ingress-nginx
        app.kubernetes.io/component: default-backend
    spec:
      containers:
      - name: default-backend
        image: k8s.gcr.io/defaultbackend-amd64:1.5
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
---
# Source: ingress-nginx/templates/defaultbackend-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.11.2
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/version: "1.11.2"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
  name: my-ingress-nginx-default-backend
  namespace: ingress-nginx
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: my-ingress-nginx
    app.kubernetes.io/component: default-backend
